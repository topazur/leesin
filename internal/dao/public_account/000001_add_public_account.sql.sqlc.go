// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: 000001_add_public_account.sql

package dao

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateAccount = `-- name: CreateAccount :one
INSERT INTO "public"."accounts" (
  "phone",
  "email",
  "username",
  "nickname",
  "password",
  "password_salt",
  "created_by",
  "updated_by",
  "updated_at",
  "deleted_by",
  "deleted_at"
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) RETURNING id, phone, email, username, nickname, password, password_salt, password_updated_at, created_by, created_at, updated_by, updated_at, deleted_by, deleted_at
`

type CreateAccountParams struct {
	Phone        pgtype.Text        `db:"phone" json:"phone"`
	Email        pgtype.Text        `db:"email" json:"email"`
	Username     pgtype.Text        `db:"username" json:"username"`
	Nickname     pgtype.Text        `db:"nickname" json:"nickname"`
	Password     pgtype.Text        `db:"password" json:"password"`
	PasswordSalt pgtype.Text        `db:"password_salt" json:"passwordSalt"`
	CreatedBy    pgtype.Int8        `db:"created_by" json:"createdBy"`
	UpdatedBy    pgtype.Int8        `db:"updated_by" json:"updatedBy"`
	UpdatedAt    pgtype.Timestamptz `db:"updated_at" json:"updatedAt"`
	DeletedBy    pgtype.Int8        `db:"deleted_by" json:"deletedBy"`
	DeletedAt    pgtype.Timestamptz `db:"deleted_at" json:"deletedAt"`
}

// CreateAccount: 创建用户
// table: accounts
func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, CreateAccount,
		arg.Phone,
		arg.Email,
		arg.Username,
		arg.Nickname,
		arg.Password,
		arg.PasswordSalt,
		arg.CreatedBy,
		arg.UpdatedBy,
		arg.UpdatedAt,
		arg.DeletedBy,
		arg.DeletedAt,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.Email,
		&i.Username,
		&i.Nickname,
		&i.Password,
		&i.PasswordSalt,
		&i.PasswordUpdatedAt,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.DeletedBy,
		&i.DeletedAt,
	)
	return i, err
}

const UpdateAccount = `-- name: UpdateAccount :one
UPDATE "public"."accounts" 
SET
 "phone" = COALESCE($1, "phone"),
 "email" = COALESCE($2, "email"),
 "username" = COALESCE($3, "username"),
 "nickname" = COALESCE($4, "nickname"),
 "password" = COALESCE($5, "password"),
 "password_salt" = COALESCE($6, "password_salt"),
 "password_updated_at" = COALESCE($7, "password_updated_at"),
 "updated_by" = COALESCE($8, "updated_by"),
 "updated_at" = COALESCE($9, "updated_at"),
 "deleted_by" = COALESCE($10, "deleted_by"),
 "deleted_at" = COALESCE($11, "deleted_at")
WHERE "id" = $12
RETURNING id, phone, email, username, nickname, password, password_salt, password_updated_at, created_by, created_at, updated_by, updated_at, deleted_by, deleted_at
`

type UpdateAccountParams struct {
	Phone             pgtype.Text        `db:"phone" json:"phone"`
	Email             pgtype.Text        `db:"email" json:"email"`
	Username          pgtype.Text        `db:"username" json:"username"`
	Nickname          pgtype.Text        `db:"nickname" json:"nickname"`
	Password          pgtype.Text        `db:"password" json:"password"`
	PasswordSalt      pgtype.Text        `db:"password_salt" json:"passwordSalt"`
	PasswordUpdatedAt pgtype.Timestamptz `db:"password_updated_at" json:"passwordUpdatedAt"`
	UpdatedBy         pgtype.Int8        `db:"updated_by" json:"updatedBy"`
	UpdatedAt         pgtype.Timestamptz `db:"updated_at" json:"updatedAt"`
	DeletedBy         pgtype.Int8        `db:"deleted_by" json:"deletedBy"`
	DeletedAt         pgtype.Timestamptz `db:"deleted_at" json:"deletedAt"`
	ID                int64              `db:"id" json:"id"`
}

// UpdateAccount: 更新用户 (非空表达式实现动态传参更新数据)
// table: accounts
//
//	NOTICE: COALESCE返回表达式中第一个非空表达式(例如: COALESCE(NULL, NULL, 1, 2) 返回 1) -  缺点就是更新时不能设置为null值
//	[nullable-parameters](https://docs.sqlc.dev/en/latest/howto/named_parameters.html#nullable-parameters)
func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, UpdateAccount,
		arg.Phone,
		arg.Email,
		arg.Username,
		arg.Nickname,
		arg.Password,
		arg.PasswordSalt,
		arg.PasswordUpdatedAt,
		arg.UpdatedBy,
		arg.UpdatedAt,
		arg.DeletedBy,
		arg.DeletedAt,
		arg.ID,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.Email,
		&i.Username,
		&i.Nickname,
		&i.Password,
		&i.PasswordSalt,
		&i.PasswordUpdatedAt,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.DeletedBy,
		&i.DeletedAt,
	)
	return i, err
}
